name: CI/CD - ToDo App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  API_IMAGE_NAME: todo-api
  FRONTEND_IMAGE_NAME: todo-frontend

jobs:
  # Job para construir y probar la API
  test-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./api/package-lock.json

    - name: Instalar dependencias
      run: npm ci

    - name: Verificar sintaxis
      run: node -c server.js

  # Job para construir y probar el Frontend
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: Instalar dependencias
      run: npm ci

    - name: Verificar sintaxis
      run: node -c server.js

  # Job para construir y publicar imágenes Docker
  build-and-push:
    needs: [test-api, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Construir y publicar imagen API
      uses: docker/build-push-action@v5
      with:
        context: ./api
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.API_IMAGE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}

    - name: Construir y publicar imagen Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}

  # Job para desplegar (ejemplo con Docker Compose)
  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Crear docker-compose.prod.yml
      run: |
        cat > docker-compose.prod.yml << EOF
        version: '3.8'
        services:
          redis:
            image: redis:7-alpine
            restart: unless-stopped
            ports:
              - "6379:6379"
            networks:
              - todo-network

          api:
            image: ${{ secrets.DOCKER_USERNAME }}/${{ env.API_IMAGE_NAME }}:latest
            restart: unless-stopped
            ports:
              - "3000:3000"
            environment:
              - PORT=3000
              - REDIS_URL=redis://redis:6379
            depends_on:
              - redis
            networks:
              - todo-network

          frontend:
            image: ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            restart: unless-stopped
            ports:
              - "8080:8080"
            environment:
              - PORT=8080
            depends_on:
              - api
            networks:
              - todo-network

        networks:
          todo-network:
            driver: bridge
        EOF

    - name: Mostrar información de despliegue
      run: |
        echo "🚀 Imágenes construidas y publicadas:"
        echo "   - API: ${{ secrets.DOCKER_USERNAME }}/${{ env.API_IMAGE_NAME }}:latest"
        echo "   - Frontend: ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest"
        echo ""
        echo "📋 Para desplegar en producción:"
        echo "   docker-compose -f docker-compose.prod.yml up -d"